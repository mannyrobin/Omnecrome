<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.armd.pbk.mappers.report.standard.So15Mapper">

    <select id="getGridViews" resultType="ru.armd.pbk.views.report.So15View" parameterType="ru.armd.pbk.core.views.BaseGridViewParams">
        <include refid="ru.armd.pbk.mappers.CommonSql.pageSupportBegin"/>
        <![CDATA[
            SELECT ROW_NUMBER() OVER (ORDER BY t.checkStartDateTime) AS id, t.* FROM (
                SELECT
                    pc.CHECK_START_TIME AS checkStartDateTime
                    , rh.ROUTE_NUMBER AS routeNumber
                    , pc.MOVE_CODE AS tsOutgoNumber
                    , eh.SURNAME + ' ' + eh.NAME + ' ' + eh.PATRONUMIC AS employee
                    , dh.FULL_NAME as department
                    , (sum(pc.CHECK_RESULT1_COUNT) + sum(pc.CHECK_RESULT2_COUNT) + sum(pc.CHECK_RESULT3_COUNT)) AS checkedPassengerCount
                FROM [PBK_TASK].TASKS t
                JOIN [PBK_PLAN].PLAN_SCHEDULES ps ON
                    ps.ID = t.PLAN_SCHEDULE_ID
                    AND (#{filter.dateFrom, jdbcType=DATE} IS NULL OR #{filter.dateFrom, jdbcType=DATE} <= ps.WORK_DATE)
                    AND (#{filter.dateTo, jdbcType=DATE} IS NULL OR #{filter.dateTo, jdbcType=DATE} >= ps.WORK_DATE)
                JOIN [PBK_NSI].[EMPLOYEE_HISTS] eh ON
                    eh.HEAD_ID = ps.EMPLOYEE_ID
                    AND eh.V_END_DATE >= [PBK_CORE].getVersionEndDate()
                JOIN [PBK_NSI].[DEPARTMENT_HISTS] dh ON
                    eh.DEPT_ID = dh.HEAD_ID  
                    AND dh.V_END_DATE >= [PBK_CORE].getVersionEndDate()
                    AND dh.FOR_PLAN_USE = 1
        ]]><if test="filter.departmentId != null"><![CDATA[
                    AND dh.HEAD_ID IN (${filter.departmentId})
        ]]></if><![CDATA[
                    AND (#{filter.deptAuthId} is null or dh.HEAD_ID = #{filter.deptAuthId})
                JOIN [PBK_TASK].[TASK_REPORTS] tr ON
                    tr.TASK_ID = t.ID
                JOIN (
                        SELECT
                            ID
                            , TASK_ID
                            , ASKP_ROUTE_CODE
                            , MOVE_CODE
                            , CHECK_START_TIME
                            , CHECK_RESULT1_COUNT
                            , CHECK_RESULT2_COUNT
                            , CHECK_RESULT3_COUNT
                        FROM PBK_VIS.ASKP_PUSK_CHECKS
                        WHERE (#{filter.dateFrom, jdbcType=DATE} IS NULL OR #{filter.dateFrom, jdbcType=DATE} <= WORK_DATE)
                            AND (#{filter.dateTo, jdbcType=DATE} IS NULL OR #{filter.dateTo, jdbcType=DATE} >= WORK_DATE)
                    ) pc  ON
                    t.ID = pc.TASK_ID
                JOIN [PBK_NSI].[ROUTE_HISTS] rh ON
                    rh.ASKP_ROUTE_CODE = pc.ASKP_ROUTE_CODE AND rh.V_END_DATE  >= [PBK_CORE].getVersionEndDate()
                GROUP BY pc.CHECK_START_TIME, rh.ROUTE_NUMBER, pc.MOVE_CODE, eh.SURNAME, eh.NAME, eh.PATRONUMIC, dh.FULL_NAME
             ) t
        ]]>
        <include refid="ru.armd.pbk.mappers.CommonSql.pageSupportEnd" />
    </select>

    <select id="getGridViewTotal" resultType="ru.armd.pbk.views.report.So15View">
        <![CDATA[
            select sum(sub.checkedPassengerCount) as checkedPassengerCount
            from(
            SELECT ROW_NUMBER() OVER (ORDER BY t.checkStartDateTime) AS id, t.* FROM (
                SELECT
                    pc.CHECK_START_TIME AS checkStartDateTime
                    , rh.ROUTE_NUMBER AS routeNumber
                    , pc.MOVE_CODE AS tsOutgoNumber
                    , eh.SURNAME + ' ' + eh.NAME + ' ' + eh.PATRONUMIC AS employee
                    , dh.FULL_NAME as department
                    , (sum(pc.CHECK_RESULT1_COUNT) + sum(pc.CHECK_RESULT2_COUNT) + sum(pc.CHECK_RESULT3_COUNT)) AS checkedPassengerCount
                FROM [PBK_TASK].TASKS t
                JOIN [PBK_PLAN].PLAN_SCHEDULES ps ON
                    ps.ID = t.PLAN_SCHEDULE_ID
                    AND (#{dateFrom, jdbcType=DATE} IS NULL OR #{dateFrom, jdbcType=DATE} <= ps.WORK_DATE)
                    AND (#{dateTo, jdbcType=DATE} IS NULL OR #{dateTo, jdbcType=DATE} >= ps.WORK_DATE)
                JOIN [PBK_NSI].[EMPLOYEE_HISTS] eh ON
                    eh.HEAD_ID = ps.EMPLOYEE_ID
                    AND eh.V_END_DATE >= [PBK_CORE].getVersionEndDate()
                JOIN [PBK_NSI].[DEPARTMENT_HISTS] dh ON
                    eh.DEPT_ID = dh.HEAD_ID  
                    AND dh.V_END_DATE >= [PBK_CORE].getVersionEndDate()
                    AND dh.FOR_PLAN_USE = 1
        ]]><if test="departmentId != null"><![CDATA[
                    AND dh.HEAD_ID IN (${departmentId})
        ]]></if><![CDATA[
                    AND (#{deptAuthId} is null or dh.HEAD_ID = #{deptAuthId})
                JOIN [PBK_TASK].[TASK_REPORTS] tr ON
                    tr.TASK_ID = t.ID
                JOIN (
                        SELECT
                            ID
                            , TASK_ID
                            , ASKP_ROUTE_CODE
                            , MOVE_CODE
                            , CHECK_START_TIME
                            , CHECK_RESULT1_COUNT
                            , CHECK_RESULT2_COUNT
                            , CHECK_RESULT3_COUNT
                        FROM PBK_VIS.ASKP_PUSK_CHECKS
                        WHERE (#{dateFrom, jdbcType=DATE} IS NULL OR #{dateFrom, jdbcType=DATE} <= WORK_DATE)
                            AND (#{dateTo, jdbcType=DATE} IS NULL OR #{dateTo, jdbcType=DATE} >= WORK_DATE)
                    ) pc  ON
                    t.ID = pc.TASK_ID
                JOIN [PBK_NSI].[ROUTE_HISTS] rh ON
                    rh.ASKP_ROUTE_CODE = pc.ASKP_ROUTE_CODE AND rh.V_END_DATE  >= [PBK_CORE].getVersionEndDate()
                GROUP BY pc.CHECK_START_TIME, rh.ROUTE_NUMBER, pc.MOVE_CODE, eh.SURNAME, eh.NAME, eh.PATRONUMIC, dh.FULL_NAME
            ) t
            ) as sub
        ]]>
    </select>
    
</mapper>
