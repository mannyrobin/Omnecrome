<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.armd.pbk.mappers.report.standard.So11Mapper">
    <select id="getGridViews" resultType="ru.armd.pbk.views.report.So11View" parameterType="ru.armd.pbk.core.views.BaseGridViewParams">
        <include refid="ru.armd.pbk.mappers.CommonSql.pageSupportBegin"/>
        <![CDATA[          
			SELECT 
				controllersCount.id,
				controllersCount.NAME as toSdik,
				controllersCount.planEmployeeCount as planEmployeeCount,
				controllersCount.factEmployeeCount as factEmployeeCount,
				exemptSkmCount, 
				exemptSkmoCount, 
				exemptVesbCount, 
				exemptLpkCount, 
				ticketSoldCount, 
				tsCheckCount, 
				exemptValidlessCount,  
				plantStowawayCount, 
				deliveryOvdCount, 
				totalSkmSkmoVesb  
   			FROM 
			   (SELECT
					d.ID as id,
					dh.NAME as name,
					(SELECT
							count(t.ID)
						FROM
							PBK_TASK.TASKS t LEFT JOIN PBK_PLAN.PLAN_SCHEDULES ps ON (t.PLAN_SCHEDULE_ID = ps.ID) LEFT JOIN PBK_NSI.SHIFTS s ON (ps.SHIFT_ID = s.ID)
						WHERE
							s.COD NOT IN ('HOLIDAY', 'VACATION', 'SICK') AND ps.DEPT_ID = d.ID
							AND (#{filter.dateFrom, jdbcType=DATE} IS NULL OR #{filter.dateFrom, jdbcType=DATE} <= cast(ps.WORK_DATE AS DATE))
							AND (#{filter.dateTo, jdbcType=DATE} IS NULL OR #{filter.dateTo, jdbcType=DATE} >= cast(ps.WORK_DATE AS DATE))
			        ) as planEmployeeCount,
					(SELECT
							count(t.ID)
						FROM
							PBK_TASK.TASKS t
							LEFT JOIN PBK_PLAN.PLAN_SCHEDULES ps ON (t.PLAN_SCHEDULE_ID = ps.ID)
							LEFT JOIN PBK_TASK.TASK_STATES ts ON (t.TASK_STATE_ID = ts.ID)
						WHERE
							ts.COD NOT IN ('IN_RESERVE', 'CANCELED') AND ps.DEPT_ID = d.ID
							AND (ps.shift_id != 5 and ps.shift_id != 4 and ps.shift_id != 1)
							AND (#{filter.dateFrom, jdbcType=DATE} IS NULL OR #{filter.dateFrom, jdbcType=DATE} <= cast(ps.WORK_DATE AS DATE))
							AND (#{filter.dateTo, jdbcType=DATE} IS NULL OR #{filter.dateTo, jdbcType=DATE} >= cast(ps.WORK_DATE AS DATE))
					) as factEmployeeCount
				FROM
					PBK_NSI.DEPARTMENTS d LEFT JOIN PBK_NSI.DEPARTMENT_HISTS dh ON (d.ID = dh.HEAD_ID AND dh.V_END_DATE >= [PBK_CORE].getVersionEndDate())
				WHERE
					 d.IS_DELETE = 0 AND dh.FOR_PLAN_USE = 1
					]]><if test="filter.departmentId != null">
				    	AND d.ID IN (${filter.departmentId})
				    </if><![CDATA[
			        AND (#{filter.deptAuthId} is null or d.ID = #{filter.deptAuthId})
				) controllersCount
				LEFT JOIN
   				(SELECT
					t.DEPT_ID AS id
					, count(DISTINCT (ps.EMPLOYEE_ID)) AS factEmployeeCount
					, sum(tr.EXEMPT_SKM_COUNT) AS exemptSkmCount
					, sum(tr.EXEMPT_SKMO_COUNT) AS exemptSkmoCount
					, sum(tr.EXEMPT_VESB_COUNT) AS exemptVesbCount
					, sum(tr.EXEMPT_OTHER_LPK_COUNT) AS exemptLpkCount
					, sum(tr.TICKET_SOLD_COUNT) AS ticketSoldCount
					, sum(tr.TS_CHECK_COUNT) AS tsCheckCount
					, sum(tr.EXEMPT_VALIDLESS_COUNT) AS exemptValidlessCount
					, sum(tr.PLANT_STOWAWAY_COUNT) AS plantStowawayCount
					, sum(tr.DELIVERY_OVD_COUNT) AS deliveryOvdCount
					, sum(tr.EXEMPT_SKM_COUNT) +  sum(tr.EXEMPT_SKMO_COUNT) + sum(tr.EXEMPT_VESB_COUNT) totalSkmSkmoVesb
				FROM
					PBK_TASK.TASKS t 
					JOIN PBK_PLAN.PLAN_SCHEDULES AS ps ON t.PLAN_SCHEDULE_ID = ps.ID
					JOIN PBK_NSI.EMPLOYEES e ON ps.EMPLOYEE_ID = e.ID AND e.IS_DELETE = 0
					JOIN PBK_NSI.EMP_DEPT_MOVES edm on (e.ID = edm.EMPLOYEE_ID) AND ps.WORK_DATE between cast(edm.PERIOD_START_DATE as date) and cast(edm.PERIOD_END_DATE as date)
 					JOIN PBK_TASK.TASK_REPORTS tr ON t.ID = tr.TASK_ID
					JOIN PBK_NSI.DEPARTMENT_HISTS dh ON t.DEPT_ID = dh.HEAD_ID
            	WHERE
            		(dh.FOR_PLAN_USE = 1)
              		AND (dh.V_END_DATE IS NULL OR dh.V_END_DATE >= [PBK_CORE].getVersionEndDate())
	              	AND (#{filter.dateFrom, jdbcType=DATE} IS NULL OR #{filter.dateFrom, jdbcType=DATE} <= cast(ps.WORK_DATE AS DATE))
	              	AND (#{filter.dateTo, jdbcType=DATE} IS NULL OR #{filter.dateTo, jdbcType=DATE} >= cast(ps.WORK_DATE AS DATE))
	              	]]><if test="filter.departmentId != null">
	              		AND t.DEPT_ID IN (${filter.departmentId})
	              	</if><![CDATA[
                  	AND (#{filter.deptAuthId} is null or t.DEPT_ID = #{filter.deptAuthId})
            	GROUP BY
            		t.DEPT_ID
				) AS ttt ON (controllersCount.ID = ttt.ID)
				LEFT JOIN PBK_NSI.DEPARTMENT_HISTS AS dhh ON ttt.id = dhh.HEAD_ID
			WHERE
				dhh.V_END_DATE IS NULL OR dhh.V_END_DATE >= [PBK_CORE].getVersionEndDate()         
        ]]><include refid="ru.armd.pbk.mappers.CommonSql.pageSupportEnd" />
    </select>
    
    
    <select id="getGridViewTotal" resultType="ru.armd.pbk.views.report.So11View" >     
        <![CDATA[    
        SELECT
        	sum(sub.planEmployeeCount) as planEmployeeCount
			, sum(sub.factEmployeeCount) as factEmployeeCount
			, sum(sub.exemptSkmCount) as exemptSkmCount
			, sum(sub.exemptSkmoCount) as exemptSkmoCount
			, sum(sub.exemptVesbCount) as exemptVesbCount
			, sum(sub.exemptLpkCount) as exemptLpkCount
			, sum(sub.ticketSoldCount) as ticketSoldCount
			, sum(sub.tsCheckCount) as tsCheckCount
			, sum(sub.exemptValidlessCount) as exemptValidlessCount
			, sum(sub.plantStowawayCount) as plantStowawayCount
			, sum(sub.deliveryOvdCount) as deliveryOvdCount
			, sum(sub.totalSkmSkmoVesb) as totalSkmSkmoVesb
		FROM
			(SELECT  
			   controllersCount.id,
			   controllersCount.NAME as toSdik,
			   controllersCount.planEmployeeCount as planEmployeeCount,
			   controllersCount.factEmployeeCount as factEmployeeCount,
			   exemptSkmCount, 
			   exemptSkmoCount, 
			   exemptVesbCount, 
			   exemptLpkCount, 
			   ticketSoldCount, 
			   tsCheckCount, 
			   exemptValidlessCount,  
			   plantStowawayCount, 
			   deliveryOvdCount, 
			   totalSkmSkmoVesb  
   			FROM 
			   (SELECT
					d.ID as id,
					dh.NAME as name,
					(SELECT
							count(t.ID)
						FROM
							PBK_TASK.TASKS t LEFT JOIN PBK_PLAN.PLAN_SCHEDULES ps ON (t.PLAN_SCHEDULE_ID = ps.ID) LEFT JOIN PBK_NSI.SHIFTS s ON (ps.SHIFT_ID = s.ID)
						WHERE
							s.COD NOT IN ('HOLIDAY', 'VACATION', 'SICK') AND ps.DEPT_ID = d.ID
							AND (#{dateFrom, jdbcType=DATE} IS NULL OR #{dateFrom, jdbcType=DATE} <= cast(ps.WORK_DATE AS DATE))
							AND (#{dateTo, jdbcType=DATE} IS NULL OR #{dateTo, jdbcType=DATE} >= cast(ps.WORK_DATE AS DATE))
			        ) as planEmployeeCount,
					(SELECT
							count(t.ID)
						FROM
							PBK_TASK.TASKS t LEFT JOIN PBK_PLAN.PLAN_SCHEDULES ps ON (t.PLAN_SCHEDULE_ID = ps.ID) LEFT JOIN PBK_TASK.TASK_STATES ts ON (t.TASK_STATE_ID = ts.ID)
						WHERE
							ts.COD NOT IN ('IN_RESERVE', 'CANCELED') AND ps.DEPT_ID = d.ID
							AND (ps.shift_id != 5 and ps.shift_id != 4 and ps.shift_id != 1)
							AND (#{dateFrom, jdbcType=DATE} IS NULL OR #{dateFrom, jdbcType=DATE} <= cast(ps.WORK_DATE AS DATE))
							AND (#{dateTo, jdbcType=DATE} IS NULL OR #{dateTo, jdbcType=DATE} >= cast(ps.WORK_DATE AS DATE))
					) as factEmployeeCount
				FROM
					PBK_NSI.DEPARTMENTS d LEFT JOIN PBK_NSI.DEPARTMENT_HISTS dh ON (d.ID = dh.HEAD_ID AND dh.V_END_DATE >= [PBK_CORE].getVersionEndDate() )
				WHERE
					 d.IS_DELETE = 0 AND dh.FOR_PLAN_USE = 1
					]]><if test="departmentId != null">
				    	AND d.ID IN (${departmentId})
				    </if><![CDATA[
			        AND (#{deptAuthId} is null or d.ID = #{deptAuthId})
				) controllersCount
				LEFT JOIN
   				(SELECT
					t.DEPT_ID AS id
					, count(DISTINCT (ps.EMPLOYEE_ID)) AS factEmployeeCount
					, sum(tr.EXEMPT_SKM_COUNT) AS exemptSkmCount
					, sum(tr.EXEMPT_SKMO_COUNT) AS exemptSkmoCount
					, sum(tr.EXEMPT_VESB_COUNT) AS exemptVesbCount
					, sum(tr.EXEMPT_OTHER_LPK_COUNT) AS exemptLpkCount
					, sum(tr.TICKET_SOLD_COUNT) AS ticketSoldCount
					, sum(tr.TS_CHECK_COUNT) AS tsCheckCount
					, sum(tr.EXEMPT_VALIDLESS_COUNT) AS exemptValidlessCount
					, sum(tr.PLANT_STOWAWAY_COUNT) AS plantStowawayCount
					, sum(tr.DELIVERY_OVD_COUNT) AS deliveryOvdCount
					, sum(tr.EXEMPT_SKM_COUNT) +  sum(tr.EXEMPT_SKMO_COUNT) + sum(tr.EXEMPT_VESB_COUNT) totalSkmSkmoVesb
            	FROM
					PBK_TASK.TASKS t 
					JOIN PBK_PLAN.PLAN_SCHEDULES AS ps ON t.PLAN_SCHEDULE_ID = ps.ID
					JOIN PBK_NSI.EMPLOYEES e ON ps.EMPLOYEE_ID = e.ID AND e.IS_DELETE = 0
					JOIN PBK_NSI.EMP_DEPT_MOVES edm on (e.ID = edm.EMPLOYEE_ID) AND ps.WORK_DATE between cast(edm.PERIOD_START_DATE as date) and cast(edm.PERIOD_END_DATE as date)
					JOIN PBK_TASK.TASK_REPORTS tr ON t.ID = tr.TASK_ID
					JOIN PBK_NSI.DEPARTMENT_HISTS dh ON t.DEPT_ID = dh.HEAD_ID
            	WHERE
					(dh.FOR_PLAN_USE = 1)
					AND (dh.V_END_DATE IS NULL OR dh.V_END_DATE >= [PBK_CORE].getVersionEndDate())
					AND (#{dateFrom, jdbcType=DATE} IS NULL OR #{dateFrom, jdbcType=DATE} <= cast(ps.WORK_DATE AS DATE))
					AND (#{dateTo, jdbcType=DATE} IS NULL OR #{dateTo, jdbcType=DATE} >= cast(ps.WORK_DATE AS DATE))
					]]><if test="departmentId != null">
						AND t.DEPT_ID IN (${departmentId})
					</if><![CDATA[
					AND (#{deptAuthId} is null or t.DEPT_ID = #{deptAuthId})
            	GROUP BY
            		t.DEPT_ID
				) AS ttt ON (controllersCount.ID = ttt.ID)
				LEFT JOIN PBK_NSI.DEPARTMENT_HISTS AS dhh ON ttt.id = dhh.HEAD_ID
			WHERE
				dhh.V_END_DATE IS NULL OR dhh.V_END_DATE >= [PBK_CORE].getVersionEndDate()
			) as sub           
        ]]>        
    </select>
</mapper>
